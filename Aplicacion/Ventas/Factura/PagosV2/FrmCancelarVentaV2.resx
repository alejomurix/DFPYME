<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAAHh4eACQkJAAqKioANTU1AEpKSgBVVVUAXl5eAGNjYwBra2sAc3NzAH19fQB1fYIAHoq8AAuM
        yQAVjcgAFIbaABSRzwAQlNEAE57dAB2a1gAMi+gAD5nrAAWW8QAYjeEAHJ3vAAWs6wALoO4ADqjrAAKg
        +gALp/kAD6r0AA2x+AAcreMAG6f1ACSZ1QAon9cALp/ZACum3gAhrucAL6bjACC26wAstvsAM6HrADqi
        7AAxt+8ARp+9AE6dvABVjLMAU5irAGeWlQB+gIIAaZ+rAE+f2wBBo9EASq/aAFmk3ABSstgAT6HqAEOk
        9ABJqfYARLLnAES07ABIs+cAVKbqAFKy4gBfs/AAaa3QAHS43wBqveQAZ77yAHm05wB/xPMAsYo6ALWD
        RwCzkUgAuJBAAL+WSQC1llUAu5BeAL6VZAC+mW0AvptxAMCZTwDEn1YAwJlsAMKecwDDonwAgoKCAIOI
        iwCIn4sAlZWVAJubmwCjpZEAq6SYAK+pnQCwqp4ApKSkAKurqwCzraIAtbu8AL+7sQC7u7sAg7HKAI20
        ygCcusUAhLrpAKG9zQCpusMAj8PrAJLG7AC9wcIAo87uAKzN6wCu1O0AsdjvAMOugwDIp4AAy6yIAMay
        hgDMto0AzbSRAM22nADPuJwA0bibAMO6qwDCv7oA0LqgAM3CrgDBwL0Az8a5ANTFsgDSx7oA0Mq+ANnM
        vQDDw8MAz8rBAMvLywDH0t4A0c/LANvPwQDS0M0A09PTANrW0ADc3NwAx9PgAM3c6wDT3OUA1+HpANjg
        5wDZ5OsA4djNAOTk5ADl5+oA5+joAOzs7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh
        YWFhYWFhYWFhYWFhYWFhYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmFhYWFhC1xhYWaHh359ZWVlZmxsZX1k
        ZGWHh29vh4eHZmJhXFgAAAAKh4eBS0lJSUk3FBIxORQRMk5FJA9Dh4eHXAAAAAAAAAiHh31UVFRUVD0U
        ES8uLSQNWjY+EhRnh4dbAAAAAAAACIeHh5CQlZiYQSknRJAoGhw/DiUhJmiHh1sAAAAAAAAIh4mJgpeD
        g4OYe3+MeoJdND0OJWiHiYmHWwAAAAAAAAiJiYl6VU9VVZp2jEpVSlVpExoTa4mJiYlbAAAAAAAACImJ
        jYNVdnx5l3Z8dYZVV1aLiYmLiYmJjVwAAAAAAAAIjY6OkJiampqbm5uampiYkJCOjo2OiY6NXAAAAAAA
        AAmOjod3d3d4eHh4eHh4d3R0V42Ojo6OjY5cAAAAAAAACY6OiE1MTExMTElMTExMTExNjo6Ojo6OjlwA
        AAAAAAAJjo6Og3h4eXl4eHh4eXl4eYCNiY2OkI6QYQAAAAAAAAmQjpCQXl5eX15eXl5eXl5eXl5eY5CQ
        jpBhAAAAAAAACpCQkJCQkIpAkJCQkJCQkJCQkJCQkJCQkGEAAAAAAAAJkJCQkJCRQBVHkJBgYGBgYF9f
        X36QkJCQYQAAAAAAAAqQmJCYkCwZGRZqlY2Li4uLi4uLj5CQkJhiAAAAAAAACZCYmJiYbjsXG22YjYuL
        i4uQmJiYmJCYkGIAAAAAAAAKmJiYmJhCHyI8k5hjYGBgYJCYmJiYmJiYYgAAAAAAAAqYmJiYmEYeHSBx
        mJiYmJiYmJiYmJiYmJhiAAAAAAAACpiYmJialmoqcJqYmpqampiamJiYmpiammIAAAAAAAAKmpqampqa
        mpKampqampqampqampqamZqaYgAAAAAAAAqampk4NTU1NTU1NTU1NTU1NTU1NTiamppiAAAAAAAACpqb
        lBgQEBAQEBAQEBgQEBAQEBAQEJSbmmIAAAAAAAAKmpuWGBgYGBgYGBgYGBgYGBgYGBgYlpuYYgAAAAAA
        AAqbm5Y7KysrKysrKys7KisrKyswMwwLC1xcAAAAAAAAC5ubm3Nzc3Nzc3Nzc5Jzc3Nzc1kKCQkJCQQA
        AAAAAAAKm5ubm5ubm5ubm5ubm5ubm5ubDAkHBwgDAAAAAAAAAAqbm5ubm5ubm5ubm5ubm5ubm5sKBgYG
        AgAAAAAAAAAAC5ubm5ubm5ubm5ubm5ubm5ubmwgFBQIAAAAAAAAAAAAKm5ubm5ubm5ubm5ubm5ubm5ua
        WAUBAAAAAAAAAIAAAAEAAAAAAAAAAOAAAAfwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AB/wAAA/8AAAf/AAAP/wAAH/
</value>
  </data>
</root>